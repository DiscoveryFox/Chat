[{"C:\\Users\\Flinn\\Documents\\Chat\\Client\\react-electron-frontend\\src\\index.tsx":"1","C:\\Users\\Flinn\\Documents\\Chat\\Client\\react-electron-frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\Flinn\\Documents\\Chat\\Client\\react-electron-frontend\\src\\App.tsx":"3","C:\\Users\\Flinn\\Documents\\Chat\\Client\\react-electron-frontend\\src\\Sidebar.tsx":"4","C:\\Users\\Flinn\\Documents\\Chat\\Client\\react-electron-frontend\\src\\Chatwindow.tsx":"5"},{"size":578,"mtime":1669241617083,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1669066292544,"results":"8","hashOfConfig":"7"},{"size":566,"mtime":1669074007804,"results":"9","hashOfConfig":"7"},{"size":955,"mtime":1669241101878,"results":"10","hashOfConfig":"7"},{"size":3917,"mtime":1669330828988,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1idx0ql",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"C:\\Users\\Flinn\\Documents\\Chat\\Client\\react-electron-frontend\\src\\index.tsx",[],[],"C:\\Users\\Flinn\\Documents\\Chat\\Client\\react-electron-frontend\\src\\reportWebVitals.ts",[],[],"C:\\Users\\Flinn\\Documents\\Chat\\Client\\react-electron-frontend\\src\\App.tsx",[],[],"C:\\Users\\Flinn\\Documents\\Chat\\Client\\react-electron-frontend\\src\\Sidebar.tsx",["29"],[],"import './Sidebar.css';\n\nclass ContactClass {\n    name: string;\n    id: number;\n\n    public constructor(name: string, id: number) {\n        this.id = id;\n        this.name = name;\n    }\n}\n\nfunction Contact(name: string, id: number) {\n    return (\n        <div className=\"contact-card\" id={id.toString()} key={id.toString()}>\n            <p>ðŸ‘¤{name}</p>\n        </div>\n    )\n}\n\nconst example_contacts = [\n    new ContactClass('flinnfx#101', 101),\n    new ContactClass('tcgamer', 102)\n]\n\nfunction Sidebar(contacts: Array<ContactClass>) {\n    return (\n        <div className=\"sidebar\">\n            <div id=\"contact_searchbar_outer_div\">\n                <input type=\"text\" id=\"contact_searchbar_inner_div\" >\n\n                </input>\n            </div>\n            {contacts.map(function (contact, i) {\n                return Contact(contact.name, contact.id)\n            })}\n        </div>\n    )\n}\n\nexport default {Sidebar, ContactClass, example_contacts};","C:\\Users\\Flinn\\Documents\\Chat\\Client\\react-electron-frontend\\src\\Chatwindow.tsx",["30"],[],"import Sidebar from \"./Sidebar\";\nimport React from \"react\";\nimport './Chatwindow.css'\nconst person1 = new Sidebar.ContactClass('Flinn', 2)\nconst person2 = new Sidebar.ContactClass('Alex', 1)\nconst contacts = [person1, person2]\n\n// TODO: Find out why there is a white border at the top of the react page.\n\nclass ClassicMessage {\n    from: string;\n    to: string;\n    text: string;\n    timestamp: string;\n\n    public constructor(from: string, to: string, text: string, timestamp: string) {\n        this.from = from;\n        this.to = to;\n        this.text = text;\n        this.timestamp = timestamp\n    }\n}\n\nfunction gen_key_from_ClassicMessage(message: ClassicMessage) {\n    return message.from + message.to + message.timestamp\n}\n\nfunction fetch_username_from_api() {\n    // find out why this fetch doesn't load and make it, so it works properly\n    //fetch('http://127.0.0.1:5000/get_my_username', {headers: {'Request-Mode': 'no-cors', 'Access-Control-Allow-Origin': 'no-cors'} }).then(r => {\n    //    console.log(r);\n    //    r.text().then(text =>\n    //    localStorage.setItem('myUserName', text));\n    //});\n    localStorage.setItem('myUserName', 'flinnfx#101')\n    //let req = new XMLHttpRequest()\n    //req.open('GET', 'http://127.0.0.1:5000/get_my_username')\n    //req.setRequestHeader('Cross-Origin-Recourse-Policy', 'no-cors')\n    //req.setRequestHeader('Access-Control-Allow-Origin', 'True')\n\n    //req.send()\n    //console.log(req.response)\n    return 'flinnfx#101'\n}\n\nfunction get_own_username() {\n    const username = localStorage.getItem('myUserName');\n    if(username === null) {\n        return fetch_username_from_api();\n    } else {\n        return username\n    }\n}\n\nfunction Message(message: ClassicMessage) {\n    if(message.from === get_own_username()) {\n        return (\n            <div key={gen_key_from_ClassicMessage(message)} className=\"SentMessageBox\">\n                <div className=\"SMessage\">\n                    {\n                    // Add Styling so the Message actually looks good\n                    }\n                    <p>{gen_key_from_ClassicMessage(message)}</p>\n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <div key={gen_key_from_ClassicMessage(message)} className=\"ReceivedMessageBox\">\n                <div className=\"RMessage\">\n                    {\n                    // Add Styling so the Message actually looks good\n                    }\n                <p>{gen_key_from_ClassicMessage(message)}</p>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nclass ChatWindow extends React.Component<{}, {messages: Array<ClassicMessage>}> {\n    UpdateTimer: NodeJS.Timer | undefined = undefined\n    constructor(args: any) {\n        super(args);\n        this.state = {messages: this.fetch_messages()}\n    }\n\n    componentDidMount() {\n        this.UpdateTimer = setInterval(() => this.update_messages(),500);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.UpdateTimer)\n    }\n\n\n    update_messages() {\n        this.setState({messages: this.fetch_messages()});\n    }\n\n    fetch_messages() {\n        const Message1 = new ClassicMessage('flinnfx#101', 'tcgamer#102', 'This is some random Junk', '21 Dez 2021 11:50:11')\n        const Message2 = new ClassicMessage('tcgamer#102','flinnfx#101', 'This is way more junk', '21 Dez 2021 11:51:22')\n\n        const msgs: Array<ClassicMessage> = [Message1, Message2];\n        return msgs\n    }\n\n    render() {\n        const messages = this.state.messages\n        console.log(typeof messages)\n        console.log(messages)\n        return (\n                <div key=\"ChatWindowMainKey\" id=\"ChatWindowMain\">\n                    {Sidebar.Sidebar(Sidebar.example_contacts)}\n                    {messages.map(function (message, i) {\n                        return Message(message);\n                    })}\n                </div>\n        )\n    }\n\n}\n\nexport default ChatWindow",{"ruleId":"31","severity":1,"message":"32","line":41,"column":1,"nodeType":"33","endLine":41,"endColumn":58},{"ruleId":"34","severity":1,"message":"35","line":6,"column":7,"nodeType":"36","messageId":"37","endLine":6,"endColumn":15},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","@typescript-eslint/no-unused-vars","'contacts' is assigned a value but never used.","Identifier","unusedVar"]